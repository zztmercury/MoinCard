package com.lovemoin.card.app.db;

import java.util.List;
import com.lovemoin.card.app.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.lovemoin.card.app.constant.Config;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.List;
// KEEP INCLUDES END
/**
 * Entity mapped to table "MERCHANT_INFO".
 */
public class MerchantInfo {

    private String merchantUUID;
    private String merchantId;
    /** Not-null value. */
    private String merchantName;
    /** Not-null value. */
    private String brand;
    private String mainImg;
    private String brief;
    private String description;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MerchantInfoDao myDao;

    private List<CardInfo> cardInfoList;
    private List<ImageInfo> imageInfoList;
    private List<ActivityInfo> activityInfoList;
    private List<StoreInfo> storeInfoList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public MerchantInfo() {
    }

    public MerchantInfo(String merchantUUID) {
        this.merchantUUID = merchantUUID;
    }

    public MerchantInfo(String merchantUUID, String merchantId, String merchantName, String brand, String mainImg, String brief, String description) {
        this.merchantUUID = merchantUUID;
        this.merchantId = merchantId;
        this.merchantName = merchantName;
        this.brand = brand;
        this.mainImg = mainImg;
        this.brief = brief;
        this.description = description;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMerchantInfoDao() : null;
    }

    public String getMerchantUUID() {
        return merchantUUID;
    }

    public void setMerchantUUID(String merchantUUID) {
        this.merchantUUID = merchantUUID;
    }

    public String getMerchantId() {
        return merchantId;
    }

    public void setMerchantId(String merchantId) {
        this.merchantId = merchantId;
    }

    /** Not-null value. */
    public String getMerchantName() {
        return merchantName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMerchantName(String merchantName) {
        this.merchantName = merchantName;
    }

    /** Not-null value. */
    public String getBrand() {
        return brand;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBrand(String brand) {
        this.brand = brand;
    }

    public String getMainImg() {
        return mainImg;
    }

    public void setMainImg(String mainImg) {
        this.mainImg = mainImg;
    }

    public String getBrief() {
        return brief;
    }

    public void setBrief(String brief) {
        this.brief = brief;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CardInfo> getCardInfoList() {
        if (cardInfoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CardInfoDao targetDao = daoSession.getCardInfoDao();
            List<CardInfo> cardInfoListNew = targetDao._queryMerchantInfo_CardInfoList(merchantUUID);
            synchronized (this) {
                if(cardInfoList == null) {
                    cardInfoList = cardInfoListNew;
                }
            }
        }
        return cardInfoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCardInfoList() {
        cardInfoList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ImageInfo> getImageInfoList() {
        if (imageInfoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImageInfoDao targetDao = daoSession.getImageInfoDao();
            List<ImageInfo> imageInfoListNew = targetDao._queryMerchantInfo_ImageInfoList(merchantUUID);
            synchronized (this) {
                if(imageInfoList == null) {
                    imageInfoList = imageInfoListNew;
                }
            }
        }
        return imageInfoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetImageInfoList() {
        imageInfoList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ActivityInfo> getActivityInfoList() {
        if (activityInfoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ActivityInfoDao targetDao = daoSession.getActivityInfoDao();
            List<ActivityInfo> activityInfoListNew = targetDao._queryMerchantInfo_ActivityInfoList(merchantUUID);
            synchronized (this) {
                if(activityInfoList == null) {
                    activityInfoList = activityInfoListNew;
                }
            }
        }
        return activityInfoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetActivityInfoList() {
        activityInfoList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<StoreInfo> getStoreInfoList() {
        if (storeInfoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StoreInfoDao targetDao = daoSession.getStoreInfoDao();
            List<StoreInfo> storeInfoListNew = targetDao._queryMerchantInfo_StoreInfoList(merchantUUID);
            synchronized (this) {
                if(storeInfoList == null) {
                    storeInfoList = storeInfoListNew;
                }
            }
        }
        return storeInfoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStoreInfoList() {
        storeInfoList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public MerchantInfo(JSONObject jsonObject) throws JSONException {
        merchantUUID = jsonObject.getString(Config.KEY_ID);
        merchantName = jsonObject.getString(Config.KEY_NAME);
        brand = jsonObject.getString(Config.KEY_MERCHANT_BRAND);
        mainImg = jsonObject.getString(Config.KEY_MERCHANT_MAIN_IMAGE);
        brief = jsonObject.getString(Config.KEY_MERCHANT_BRIEF);
        description = jsonObject.getString(Config.KEY_MERCHANT_DESCRIPTION);
    }
    // KEEP METHODS END

}
