package com.lovemoin.card.app.db;

import com.lovemoin.card.app.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.lovemoin.card.app.constant.Config;
import org.json.JSONException;
import org.json.JSONObject;
// KEEP INCLUDES END
/**
 * Entity mapped to table "STORE_INFO".
 */
public class StoreInfo {

    private String storeId;
    /** Not-null value. */
    private String name;
    private String addr;
    private String tel;
    private String merchantId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StoreInfoDao myDao;

    private MerchantInfo merchantInfo;
    private String merchantInfo__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public StoreInfo() {
    }

    public StoreInfo(String storeId) {
        this.storeId = storeId;
    }

    public StoreInfo(String storeId, String name, String addr, String tel, String merchantId) {
        this.storeId = storeId;
        this.name = name;
        this.addr = addr;
        this.tel = tel;
        this.merchantId = merchantId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStoreInfoDao() : null;
    }

    public String getStoreId() {
        return storeId;
    }

    public void setStoreId(String storeId) {
        this.storeId = storeId;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public String getAddr() {
        return addr;
    }

    public void setAddr(String addr) {
        this.addr = addr;
    }

    public String getTel() {
        return tel;
    }

    public void setTel(String tel) {
        this.tel = tel;
    }

    public String getMerchantId() {
        return merchantId;
    }

    public void setMerchantId(String merchantId) {
        this.merchantId = merchantId;
    }

    /** To-one relationship, resolved on first access. */
    public MerchantInfo getMerchantInfo() {
        String __key = this.merchantId;
        if (merchantInfo__resolvedKey == null || merchantInfo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MerchantInfoDao targetDao = daoSession.getMerchantInfoDao();
            MerchantInfo merchantInfoNew = targetDao.load(__key);
            synchronized (this) {
                merchantInfo = merchantInfoNew;
            	merchantInfo__resolvedKey = __key;
            }
        }
        return merchantInfo;
    }

    public void setMerchantInfo(MerchantInfo merchantInfo) {
        synchronized (this) {
            this.merchantInfo = merchantInfo;
            merchantId = merchantInfo == null ? null : merchantInfo.getMerchantUUID();
            merchantInfo__resolvedKey = merchantId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public StoreInfo(JSONObject jsonObject) throws JSONException {
        storeId = jsonObject.getString(Config.KEY_STORE_ID);
        addr = jsonObject.getString(Config.KEY_STORE_ADDR);
        name = jsonObject.getString(Config.KEY_STORE_NAME);
        tel = jsonObject.getString(Config.KEY_STORE_TEL);
    }
    // KEEP METHODS END

}
