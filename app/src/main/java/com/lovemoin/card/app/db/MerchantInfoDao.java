package com.lovemoin.card.app.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lovemoin.card.app.db.MerchantInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MERCHANT_INFO".
*/
public class MerchantInfoDao extends AbstractDao<MerchantInfo, String> {

    public static final String TABLENAME = "MERCHANT_INFO";

    /**
     * Properties of entity MerchantInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MerchantUUID = new Property(0, String.class, "merchantUUID", true, "MERCHANT_UUID");
        public final static Property MerchantId = new Property(1, String.class, "merchantId", false, "MERCHANT_ID");
        public final static Property MerchantName = new Property(2, String.class, "merchantName", false, "MERCHANT_NAME");
        public final static Property Brand = new Property(3, String.class, "brand", false, "BRAND");
        public final static Property MainImg = new Property(4, String.class, "mainImg", false, "MAIN_IMG");
        public final static Property Brief = new Property(5, String.class, "brief", false, "BRIEF");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
    };

    private DaoSession daoSession;


    public MerchantInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MerchantInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MERCHANT_INFO\" (" + //
                "\"MERCHANT_UUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: merchantUUID
                "\"MERCHANT_ID\" TEXT," + // 1: merchantId
                "\"MERCHANT_NAME\" TEXT NOT NULL ," + // 2: merchantName
                "\"BRAND\" TEXT NOT NULL ," + // 3: brand
                "\"MAIN_IMG\" TEXT," + // 4: mainImg
                "\"BRIEF\" TEXT," + // 5: brief
                "\"DESCRIPTION\" TEXT);"); // 6: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MERCHANT_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MerchantInfo entity) {
        stmt.clearBindings();
 
        String merchantUUID = entity.getMerchantUUID();
        if (merchantUUID != null) {
            stmt.bindString(1, merchantUUID);
        }
 
        String merchantId = entity.getMerchantId();
        if (merchantId != null) {
            stmt.bindString(2, merchantId);
        }
        stmt.bindString(3, entity.getMerchantName());
        stmt.bindString(4, entity.getBrand());
 
        String mainImg = entity.getMainImg();
        if (mainImg != null) {
            stmt.bindString(5, mainImg);
        }
 
        String brief = entity.getBrief();
        if (brief != null) {
            stmt.bindString(6, brief);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
    }

    @Override
    protected void attachEntity(MerchantInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MerchantInfo readEntity(Cursor cursor, int offset) {
        MerchantInfo entity = new MerchantInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // merchantUUID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // merchantId
            cursor.getString(offset + 2), // merchantName
            cursor.getString(offset + 3), // brand
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mainImg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // brief
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MerchantInfo entity, int offset) {
        entity.setMerchantUUID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMerchantId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMerchantName(cursor.getString(offset + 2));
        entity.setBrand(cursor.getString(offset + 3));
        entity.setMainImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBrief(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MerchantInfo entity, long rowId) {
        return entity.getMerchantUUID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MerchantInfo entity) {
        if(entity != null) {
            return entity.getMerchantUUID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
