package com.lovemoin.card.app.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MERCHANT_INFO".
 */
public class MerchantInfoDao extends AbstractDao<MerchantInfo, String> {

    public static final String TABLENAME = "MERCHANT_INFO";
    private DaoSession daoSession;
    ;

    public MerchantInfoDao(DaoConfig config) {
        super(config);
    }


    public MerchantInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"MERCHANT_INFO\" (" + //
                "\"MERCHANT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: merchantId
                "\"MERCHANT_NAME\" TEXT NOT NULL ," + // 1: merchantName
                "\"BRAND\" TEXT NOT NULL ," + // 2: brand
                "\"MAIN_IMG\" TEXT," + // 3: mainImg
                "\"BRIEF\" TEXT," + // 4: brief
                "\"DESCRIPTION\" TEXT);"); // 5: description
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MERCHANT_INFO\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, MerchantInfo entity) {
        stmt.clearBindings();

        String merchantId = entity.getMerchantId();
        if (merchantId != null) {
            stmt.bindString(1, merchantId);
        }
        stmt.bindString(2, entity.getMerchantName());
        stmt.bindString(3, entity.getBrand());

        String mainImg = entity.getMainImg();
        if (mainImg != null) {
            stmt.bindString(4, mainImg);
        }

        String brief = entity.getBrief();
        if (brief != null) {
            stmt.bindString(5, brief);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
    }

    @Override
    protected void attachEntity(MerchantInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public MerchantInfo readEntity(Cursor cursor, int offset) {
        MerchantInfo entity = new MerchantInfo( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // merchantId
                cursor.getString(offset + 1), // merchantName
                cursor.getString(offset + 2), // brand
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mainImg
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // brief
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // description
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, MerchantInfo entity, int offset) {
        entity.setMerchantId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMerchantName(cursor.getString(offset + 1));
        entity.setBrand(cursor.getString(offset + 2));
        entity.setMainImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBrief(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(MerchantInfo entity, long rowId) {
        return entity.getMerchantId();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(MerchantInfo entity) {
        if (entity != null) {
            return entity.getMerchantId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity MerchantInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MerchantId = new Property(0, String.class, "merchantId", true, "MERCHANT_ID");
        public final static Property MerchantName = new Property(1, String.class, "merchantName", false, "MERCHANT_NAME");
        public final static Property Brand = new Property(2, String.class, "brand", false, "BRAND");
        public final static Property MainImg = new Property(3, String.class, "mainImg", false, "MAIN_IMG");
        public final static Property Brief = new Property(4, String.class, "brief", false, "BRIEF");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
    }

}
