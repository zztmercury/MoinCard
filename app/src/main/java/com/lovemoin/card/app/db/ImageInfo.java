package com.lovemoin.card.app.db;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "IMAGE_INFO".
 */
public class ImageInfo {

    private Long id;
    private int width;
    private int height;
    private int color;
    /**
     * Not-null value.
     */
    private String url;
    private String desc;
    private String merchantId;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient ImageInfoDao myDao;

    private MerchantInfo merchantInfo;
    private String merchantInfo__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ImageInfo() {
    }

    public ImageInfo(Long id) {
        this.id = id;
    }

    public ImageInfo(Long id, int width, int height, int color, String url, String desc, String merchantId) {
        this.id = id;
        this.width = width;
        this.height = height;
        this.color = color;
        this.url = url;
        this.desc = desc;
        this.merchantId = merchantId;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getImageInfoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getWidth() {
        return width;
    }

    public void setWidth(int width) {
        this.width = width;
    }

    public int getHeight() {
        return height;
    }

    public void setHeight(int height) {
        this.height = height;
    }

    public int getColor() {
        return color;
    }

    public void setColor(int color) {
        this.color = color;
    }

    /**
     * Not-null value.
     */
    public String getUrl() {
        return url;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setUrl(String url) {
        this.url = url;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public String getMerchantId() {
        return merchantId;
    }

    public void setMerchantId(String merchantId) {
        this.merchantId = merchantId;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public MerchantInfo getMerchantInfo() {
        String __key = this.merchantId;
        if (merchantInfo__resolvedKey == null || merchantInfo__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MerchantInfoDao targetDao = daoSession.getMerchantInfoDao();
            MerchantInfo merchantInfoNew = targetDao.load(__key);
            synchronized (this) {
                merchantInfo = merchantInfoNew;
                merchantInfo__resolvedKey = __key;
            }
        }
        return merchantInfo;
    }

    public void setMerchantInfo(MerchantInfo merchantInfo) {
        synchronized (this) {
            this.merchantInfo = merchantInfo;
            merchantId = merchantInfo == null ? null : merchantInfo.getMerchantId();
            merchantInfo__resolvedKey = merchantId;
        }
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
