package com.lovemoin.card.app.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "STORE_INFO".
 */
public class StoreInfoDao extends AbstractDao<StoreInfo, String> {

    public static final String TABLENAME = "STORE_INFO";
    private DaoSession daoSession;
    ;
    private Query<StoreInfo> merchantInfo_StoreInfoListQuery;
    private String selectDeep;

    public StoreInfoDao(DaoConfig config) {
        super(config);
    }

    public StoreInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORE_INFO\" (" + //
                "\"STORE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: storeId
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"ADDR\" TEXT," + // 2: addr
                "\"TEL\" TEXT," + // 3: tel
                "\"MERCHANT_ID\" TEXT);"); // 4: merchantId
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORE_INFO\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, StoreInfo entity) {
        stmt.clearBindings();

        String storeId = entity.getStoreId();
        if (storeId != null) {
            stmt.bindString(1, storeId);
        }
        stmt.bindString(2, entity.getName());

        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(3, addr);
        }

        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(4, tel);
        }

        String merchantId = entity.getMerchantId();
        if (merchantId != null) {
            stmt.bindString(5, merchantId);
        }
    }

    @Override
    protected void attachEntity(StoreInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public StoreInfo readEntity(Cursor cursor, int offset) {
        StoreInfo entity = new StoreInfo( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // storeId
                cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // addr
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tel
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // merchantId
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, StoreInfo entity, int offset) {
        entity.setStoreId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAddr(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMerchantId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(StoreInfo entity, long rowId) {
        return entity.getStoreId();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(StoreInfo entity) {
        if (entity != null) {
            return entity.getStoreId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "storeInfoList" to-many relationship of MerchantInfo.
     */
    public List<StoreInfo> _queryMerchantInfo_StoreInfoList(String merchantId) {
        synchronized (this) {
            if (merchantInfo_StoreInfoListQuery == null) {
                QueryBuilder<StoreInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MerchantId.eq(null));
                merchantInfo_StoreInfoListQuery = queryBuilder.build();
            }
        }
        Query<StoreInfo> query = merchantInfo_StoreInfoListQuery.forCurrentThread();
        query.setParameter(0, merchantId);
        return query.list();
    }

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMerchantInfoDao().getAllColumns());
            builder.append(" FROM STORE_INFO T");
            builder.append(" LEFT JOIN MERCHANT_INFO T0 ON T.\"MERCHANT_ID\"=T0.\"MERCHANT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected StoreInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        StoreInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        MerchantInfo merchantInfo = loadCurrentOther(daoSession.getMerchantInfoDao(), cursor, offset);
        entity.setMerchantInfo(merchantInfo);

        return entity;
    }

    public StoreInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<StoreInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<StoreInfo> list = new ArrayList<StoreInfo>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<StoreInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }

    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<StoreInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    /**
     * Properties of entity StoreInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StoreId = new Property(0, String.class, "storeId", true, "STORE_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Addr = new Property(2, String.class, "addr", false, "ADDR");
        public final static Property Tel = new Property(3, String.class, "tel", false, "TEL");
        public final static Property MerchantId = new Property(4, String.class, "merchantId", false, "MERCHANT_ID");
    }

}
