package com.lovemoin.card.app.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.lovemoin.card.app.db.ImageInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_INFO".
*/
public class ImageInfoDao extends AbstractDao<ImageInfo, Long> {

    public static final String TABLENAME = "IMAGE_INFO";

    /**
     * Properties of entity ImageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Width = new Property(1, int.class, "width", false, "WIDTH");
        public final static Property Height = new Property(2, int.class, "height", false, "HEIGHT");
        public final static Property Color = new Property(3, int.class, "color", false, "COLOR");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
        public final static Property MerchantId = new Property(6, String.class, "merchantId", false, "MERCHANT_ID");
    };

    private DaoSession daoSession;

    private Query<ImageInfo> merchantInfo_ImageInfoListQuery;

    public ImageInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ImageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WIDTH\" INTEGER NOT NULL ," + // 1: width
                "\"HEIGHT\" INTEGER NOT NULL ," + // 2: height
                "\"COLOR\" INTEGER NOT NULL ," + // 3: color
                "\"URL\" TEXT NOT NULL ," + // 4: url
                "\"DESC\" TEXT," + // 5: desc
                "\"MERCHANT_ID\" TEXT);"); // 6: merchantId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ImageInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getWidth());
        stmt.bindLong(3, entity.getHeight());
        stmt.bindLong(4, entity.getColor());
        stmt.bindString(5, entity.getUrl());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String merchantId = entity.getMerchantId();
        if (merchantId != null) {
            stmt.bindString(7, merchantId);
        }
    }

    @Override
    protected void attachEntity(ImageInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ImageInfo readEntity(Cursor cursor, int offset) {
        ImageInfo entity = new ImageInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // width
            cursor.getInt(offset + 2), // height
            cursor.getInt(offset + 3), // color
            cursor.getString(offset + 4), // url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // desc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // merchantId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ImageInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWidth(cursor.getInt(offset + 1));
        entity.setHeight(cursor.getInt(offset + 2));
        entity.setColor(cursor.getInt(offset + 3));
        entity.setUrl(cursor.getString(offset + 4));
        entity.setDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMerchantId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ImageInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ImageInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "imageInfoList" to-many relationship of MerchantInfo. */
    public List<ImageInfo> _queryMerchantInfo_ImageInfoList(String merchantId) {
        synchronized (this) {
            if (merchantInfo_ImageInfoListQuery == null) {
                QueryBuilder<ImageInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MerchantId.eq(null));
                merchantInfo_ImageInfoListQuery = queryBuilder.build();
            }
        }
        Query<ImageInfo> query = merchantInfo_ImageInfoListQuery.forCurrentThread();
        query.setParameter(0, merchantId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMerchantInfoDao().getAllColumns());
            builder.append(" FROM IMAGE_INFO T");
            builder.append(" LEFT JOIN MERCHANT_INFO T0 ON T.\"MERCHANT_ID\"=T0.\"MERCHANT_UUID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ImageInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        ImageInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        MerchantInfo merchantInfo = loadCurrentOther(daoSession.getMerchantInfoDao(), cursor, offset);
        entity.setMerchantInfo(merchantInfo);

        return entity;    
    }

    public ImageInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ImageInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ImageInfo> list = new ArrayList<ImageInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ImageInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ImageInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
