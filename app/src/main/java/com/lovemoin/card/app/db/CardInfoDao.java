package com.lovemoin.card.app.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CARD_INFO".
 */
public class CardInfoDao extends AbstractDao<CardInfo, Long> {

    public static final String TABLENAME = "CARD_INFO";

    public CardInfoDao(DaoConfig config) {
        super(config);
    }

    ;


    public CardInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CARD_CODE\" TEXT NOT NULL ," + // 1: cardCode
                "\"CARD_IMG\" TEXT," + // 2: cardImg
                "\"CARD_BRAND\" TEXT," + // 3: cardBrand
                "\"CARD_TYPE\" TEXT NOT NULL ," + // 4: cardType
                "\"CARD_DESC\" TEXT NOT NULL ," + // 5: cardDesc
                "\"CONVERT_OBJ\" TEXT NOT NULL ," + // 6: convertObj
                "\"CREATE_DATE\" INTEGER NOT NULL ," + // 7: createDate
                "\"START_DATE\" INTEGER NOT NULL ," + // 8: startDate
                "\"END_DATE\" INTEGER NOT NULL ," + // 9: endDate
                "\"CONVERT_POINT\" INTEGER NOT NULL ," + // 10: convertPoint
                "\"CURRENT_POINT\" INTEGER NOT NULL ," + // 11: currentPoint
                "\"MAX_POINT\" INTEGER NOT NULL );"); // 12: maxPoint
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD_INFO\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, CardInfo entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCardCode());

        String cardImg = entity.getCardImg();
        if (cardImg != null) {
            stmt.bindString(3, cardImg);
        }

        String cardBrand = entity.getCardBrand();
        if (cardBrand != null) {
            stmt.bindString(4, cardBrand);
        }
        stmt.bindString(5, entity.getCardType());
        stmt.bindString(6, entity.getCardDesc());
        stmt.bindString(7, entity.getConvertObj());
        stmt.bindLong(8, entity.getCreateDate().getTime());
        stmt.bindLong(9, entity.getStartDate().getTime());
        stmt.bindLong(10, entity.getEndDate().getTime());
        stmt.bindLong(11, entity.getConvertPoint());
        stmt.bindLong(12, entity.getCurrentPoint());
        stmt.bindLong(13, entity.getMaxPoint());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public CardInfo readEntity(Cursor cursor, int offset) {
        CardInfo entity = new CardInfo( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // cardCode
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cardImg
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cardBrand
                cursor.getString(offset + 4), // cardType
                cursor.getString(offset + 5), // cardDesc
                cursor.getString(offset + 6), // convertObj
                new java.util.Date(cursor.getLong(offset + 7)), // createDate
                new java.util.Date(cursor.getLong(offset + 8)), // startDate
                new java.util.Date(cursor.getLong(offset + 9)), // endDate
                cursor.getInt(offset + 10), // convertPoint
                cursor.getInt(offset + 11), // currentPoint
                cursor.getInt(offset + 12) // maxPoint
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, CardInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCardCode(cursor.getString(offset + 1));
        entity.setCardImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCardBrand(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCardType(cursor.getString(offset + 4));
        entity.setCardDesc(cursor.getString(offset + 5));
        entity.setConvertObj(cursor.getString(offset + 6));
        entity.setCreateDate(new java.util.Date(cursor.getLong(offset + 7)));
        entity.setStartDate(new java.util.Date(cursor.getLong(offset + 8)));
        entity.setEndDate(new java.util.Date(cursor.getLong(offset + 9)));
        entity.setConvertPoint(cursor.getInt(offset + 10));
        entity.setCurrentPoint(cursor.getInt(offset + 11));
        entity.setMaxPoint(cursor.getInt(offset + 12));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(CardInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(CardInfo entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity CardInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CardCode = new Property(1, String.class, "cardCode", false, "CARD_CODE");
        public final static Property CardImg = new Property(2, String.class, "cardImg", false, "CARD_IMG");
        public final static Property CardBrand = new Property(3, String.class, "cardBrand", false, "CARD_BRAND");
        public final static Property CardType = new Property(4, String.class, "cardType", false, "CARD_TYPE");
        public final static Property CardDesc = new Property(5, String.class, "cardDesc", false, "CARD_DESC");
        public final static Property ConvertObj = new Property(6, String.class, "convertObj", false, "CONVERT_OBJ");
        public final static Property CreateDate = new Property(7, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property StartDate = new Property(8, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(9, java.util.Date.class, "endDate", false, "END_DATE");
        public final static Property ConvertPoint = new Property(10, int.class, "convertPoint", false, "CONVERT_POINT");
        public final static Property CurrentPoint = new Property(11, int.class, "currentPoint", false, "CURRENT_POINT");
        public final static Property MaxPoint = new Property(12, int.class, "maxPoint", false, "MAX_POINT");
    }

}
